Shift a letter right by the given number.
Wrap the letter around if it reaches the end of the alphabet.
Examples:
shift_letter("A", 0) -> "A"
shift_letter("A", 2) -> "C"
shift_letter("Z", 1) -> "A"
shift_letter("X", 5) -> "C"
shift_letter(" ", _) -> " "
*Note: the single underscore `_` is used to acknowledge the presence
    of a value without caring about its contents.
Parameters
----------
letter: str
    a single uppercase English letter, or a space.
shift: int
    the number by which to shift the letter. 
Returns
-------
str
    the letter, shifted appropriately, if a letter.
    a single space if the original letter was a space.
'''
if letter == " ":
    return " "
else:
    new_ord = (ord(letter) - 65 + shift) % 26 + 65  # calculate the new ASCII code by adding the shift
    return chr(new_ord)  # return the new letter

def shift_letter(letter, shift):
    if letter == " ":
        return " "
    else:
        ascii_code = ord(letter)
        shifted_ascii_code = (ascii_code - 65 + shift) % 26 + 65
        return chr(shifted_ascii_code)


def caesar_cipher(message, shift):
    '''Caesar Cipher. 
    6 points.
    
    Apply a shift number to a string of uppercase English letters and spaces.
    Parameters
    ----------
    message: str
        a string of uppercase English letters and spaces.
    shift: int
        the number by which to shift the letters. 
    Returns
    -------
    str
        the message, shifted appropriately.
    '''
    result = ''
    for letter in message:
        if letter == ' ':
            result += ' '
        else:
            shifted_letter = shift_letter(letter, shift)
            result += shifted_letter
    return result

def caesar_cipher(message, shift):
  shifted_message = ""
    for letter in message:
        if letter == " ":
            shifted_message += " "
        else:
            shifted_letter = shift_letter(letter, shift)
            shifted_message += shifted_letter
    return shifted_message
    
    def shift_letter(letter, shift):
    '''Shift Letter. 
    4 points.
    
    Shift a letter right by the given number.
    Wrap the letter around if it reaches the end of the alphabet.
    Examples:
    shift_letter("A", 0) -> "A"
    shift_letter("A", 2) -> "C"
    shift_letter("Z", 1) -> "A"
    shift_letter("X", 5) -> "C"
    shift_letter(" ", _) -> " "
    *Note: the single underscore `_` is used to acknowledge the presence
        of a value without caring about its contents.
    Parameters
    ----------
    letter: str
        a single uppercase English letter, or a space.
    shift: int
        the number by which to shift the letter. 
    Returns
    -------
    str
        the letter, shifted appropriately, if a letter.
        a single space if the original letter was a space.
    '''
    if letter == ' ':
        return ' '
    else:
        ascii_val = ord(letter) + shift
        if ascii_val > ord('Z'):
            ascii_val = ascii_val - 26
        return chr(ascii_val)
def shift_by_letter(letter, letter_shift):
    '''Shift By Letter. 
    4 points.

    Shift a letter to the right using the number equivalent of another letter.
    The shift letter is any letter from A to Z, where A represents 0, B represents 1,
        ..., Z represents 25.
    Examples:
    shift_by_letter("A", "A") -> "A"
    shift_by_letter("A", "C") -> "C"
    shift_by_letter("B", "K") -> "L"
    shift_by_letter(" ", _) -> " "
    Parameters
    ----------
    letter: str
        a single uppercase English letter, or a space.
    letter_shift: str
        a single uppercase English letter.
    Returns
    -------
    str
        the letter, shifted appropriately.
    '''
    if letter == ' ':
        return ' '
    shift = ord(letter_shift) - ord('A')
    return shift_letter(letter, shift)
def vigenere_cipher(message, key):
    '''Vigenere Cipher. 
    6 points.

    Encrypts a message using a keyphrase instead of a static number.
    Every letter in the message is shifted by the number represented by the 
        respective letter in the key.
    Spaces should be ignored.
    Example:
    vigenere_cipher("A C", "KEY") -> "K A"
    If needed, the keyphrase is extended to match the length of the key.
        If the key is "KEY" and the message is "LONGTEXT",
        the key will be extended to be "KEYKEYKE".
    Parameters
    ----------
    message: str
        a string of uppercase English letters and spaces.
    key: str
        a string of uppercase English letters. Will never be longer than the message.
        Will never contain spaces.
    Returns
    -------
    str
        the message, shifted appropriately.
    '''
    key = key * (len(message) // len(key) + 1)
    result = ''
    for i, c in enumerate(message):
        if c == ' ':
            result += ' '
            continue
        shift = ord(key[i]) - ord('A')
        shifted_c = shift_letter(c, shift)
        result += shifted_c
    return result



(SECOND CODE ATTEMPT) 
(Or this code) 
def shift_letter(letter, shift):
    '''Shift Letter. 
    4 points.
    
    Shift a letter right by the given number.
    Wrap the letter around if it reaches the end of the alphabet.
    Examples:
    shift_letter("A", 0) -> "A"
    shift_letter("A", 2) -> "C"
    shift_letter("Z", 1) -> "A"
    shift_letter("X", 5) -> "C"
    shift_letter(" ", _) -> " "
    *Note: the single underscore `_` is used to acknowledge the presence
        of a value without caring about its contents.
    Parameters
    ----------
    letter: str
        a single uppercase English letter, or a space.
    shift: int
        the number by which to shift the letter. 
    Returns
    -------
    str
        the letter, shifted appropriately, if a letter.
        a single space if the original letter was a space.
    '''
    if letter == ' ':
        return ' '
    else:
        ascii_val = ord(letter) + shift
        if ascii_val > ord('Z'):
            ascii_val = ascii_val - 26
        return chr(ascii_val)
        

def caesar_cipher(message, shift):
    '''Caesar Cipher. 
    6 points.
    
    Apply a shift number to a string of uppercase English letters and spaces.
    Parameters
    ----------
    message: str
        a string of uppercase English letters and spaces.
    shift: int
        the number by which to shift the letters. 
    Returns
    -------
    str
        the message, shifted appropriately.
    '''
    shifted_message = ""
    for letter in message:
        shifted_message += shift_letter(letter, shift)
    return shifted_message

def shift_by_letter(letter, letter_shift):
    '''Shift By Letter. 
    4 points.

    Shift a letter to the right using the number equivalent of another letter.
    The shift letter is any letter from A to Z, where A represents 0, B represents 1,
        ..., Z represents 25.
    Examples:
    shift_by_letter("A", "A") -> "A"
    shift_by_letter("A", "C") -> "C"
    shift_by_letter("B", "K") -> "L"
    shift_by_letter(" ", _) -> " "
    Parameters
    ----------
    letter: str
        a single uppercase English letter, or a space.
    letter_shift: str
        a single uppercase English letter.
    Returns
    -------
    str
        the letter, shifted appropriately.
    '''
    if letter == ' ':
        return ' '
    shift = ord(letter_shift) - ord('A')
    return shift_letter(letter, shift)
def vigenere_cipher(message, key):
    '''Vigenere Cipher. 
    6 points.

    Encrypts a message using a keyphrase instead of a static number.
    Every letter in the message is shifted by the number represented by the 
        respective letter in the key.
    Spaces should be ignored.
    Example:
    vigenere_cipher("A C", "KEY") -> "K A"
    If needed, the keyphrase is extended to match the length of the key.
        If the key is "KEY" and the message is "LONGTEXT",
        the key will be extended to be "KEYKEYKE".
    Parameters
    ----------
    message: str
        a string of uppercase English letters and spaces.
    key: str
        a string of uppercase English letters. Will never be longer than the message.
        Will never contain spaces.
    Returns
    -------
    str
        the message, shifted appropriately.
    '''
    key = key * (len(message) // len(key) + 1)
    result = ''
    for i, c in enumerate(message):
        if c == ' ':
            result += ' '
            continue
        shift = ord(key[i]) - ord('A')
        shifted_c = shift_letter(c, shift)
        result += shifted_c
    return result
