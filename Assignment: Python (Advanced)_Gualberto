def relationship_status(from_member, to_member, social_graph):
    if to_member in social_graph.get(from_member, []):
        if from_member in social_graph.get(to_member, []):
            return "friends"
        else:
            return "followed by"
    elif from_member in social_graph.get(to_member, []):
        return "follower"
    else:
        return "no relationship"

def tic_tac_toe(board):
    # Check Rows
    for row in board:
        if len(set(row)) == 1 and row[0] != "-":
            return row[0]

    # Check Columns
    for i in range(len(board)):
        column = [board[j][i] for j in range(len(board))]
        if len(set(column)) == 1 and column[0] != "-":
            return column[0]

    # Check Diagonals
    diagonal1 = [board[i][i] for i in range(len(board))]
    diagonal2 = [board[i][len(board)-1-i] for i in range(len(board))]
    if len(set(diagonal1)) == 1 and diagonal1[0] != "-":
        return diagonal1[0]
    elif len(set(diagonal2)) == 1 and diagonal2[0] != "-":
        return diagonal2[0]

    return "NO WINNER"
def eta(first_stop, second_stop, route_map):
    time = 0
    found_first = False
    found_second = False

    for stop, legs in route_map.items():
        if stop == first_stop:
            found_first = True
            for leg in legs:
                time += leg[1]
                if leg[0] == second_stop:
                    found_second = True
                    break
        elif found_first:
            time += legs[-1][1]
            break

    if found_first and found_second:
        return time
    else:
        return -1
